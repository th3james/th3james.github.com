<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Saving the planet, one website at a time]]></title>
  <link href="http://th3james.github.com/atom.xml" rel="self"/>
  <link href="http://th3james.github.com/"/>
  <updated>2013-03-30T11:45:00+00:00</updated>
  <id>http://th3james.github.com/</id>
  <author>
    <name><![CDATA[th3james]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[th3james' blog IV: A new home]]></title>
    <link href="http://th3james.github.com/blog/2013/03/30/blog-migrated/"/>
    <updated>2013-03-30T11:07:00+00:00</updated>
    <id>http://th3james.github.com/blog/2013/03/30/blog-migrated</id>
    <content type="html"><![CDATA[<p>So, posterous is dead, so I&#8217;ve been forced to move this blog to a new home. Perhaps foolishly, I&#8217;m trusting another free provider (this time, github) to host my blog. I am at least running Octopress this time, so migration should be easier.</p>

<p>Anyway, apologies for being a bit quiet on here recently, but I&#8217;ve been busy with lots of exciting stuff to do with Backbone.js which I&#8217;ll be releasing over the next few months.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.ViewManager - A backbone extension to stop view memory/binding leaks]]></title>
    <link href="http://th3james.github.com/blog/2012/08/10/backboneviewmanager-a-backbone-extension-to-s/"/>
    <updated>2012-08-10T00:00:00+01:00</updated>
    <id>http://th3james.github.com/blog/2012/08/10/backboneviewmanager-a-backbone-extension-to-s</id>
    <content type="html"><![CDATA[<p>Recently when working with Backbone I discovered how easy it was to leak Backbone Views into memory by not taking care to unbind all events listeners associated with views before discarding them. This issue is discussed at length by Derick Bailey in his post about backbone &#8216;Zombie&#8217; views:&nbsp;<a href="http://lostechies.com/derickbailey/2011/09/15/zombies-run-managing-page-transitions-in-backbone-apps/">http://lostechies.com/derickbailey/2011/09/15/zombies-run-managing-page-transitions-in-backbone-apps/</a></p>
<p>This issue for me was particularly pronounced when swapping objects in and out of a &#8216;content&#8217; DOM element, quickly ruining my apps performance. So, I wrote a library that extends Backbone.View to help keep reference of view bindings, and dispose of them when discarding. I call it Backbone.ViewManager, take a look over on github:</p>
<p><a href="https://github.com/th3james/Backbone.ViewManager">https://github.com/th3james/Backbone.ViewManager</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing locale issues over SSH after zsh upgrade]]></title>
    <link href="http://th3james.github.com/blog/2012/07/18/fixing-locale-issues-over-ssh-after-zsh-upgra/"/>
    <updated>2012-07-18T00:00:00+01:00</updated>
    <id>http://th3james.github.com/blog/2012/07/18/fixing-locale-issues-over-ssh-after-zsh-upgra</id>
    <content type="html"><![CDATA[<p>I recently upgraded to the rather nice <a href="https://github.com/robbyrussell/oh-my-zsh/">OhMyZsh</a>, which I was enjoying, until SSH&#8217;ed to one of our Ubuntu servers, tabbed to auto complete, and was presented with this message:</p>
<div style="background-color: #000000; color: #00ff00; font-family: monospace; padding: 5px;"><em>-bash: warning: setlocale: LC_CTYPE: cannot change locale (en_GB.UTF-8)</em></div>
<p>&#8230; each and every time I tabbed. Needless to say, this gets pretty annoying fast.</p>
<p>I tried a few solutions on the internet, before stumbling across <a href="http://blog.andrewbeacock.com/2007/01/how-to-change-your-default-locale-on.html">this</a>&nbsp;post which pointed me towards <span style="color: #333333; font-family: monospace;">/var/lib/locales/supported.d/local.</span></p>
<p>To fix the issue, you need to add a line to that file for the locale that bash is complaining about:</p>
<div style="background-color: #000; color: #7bf163; font-family: monospace; padding: 5px;"><em>en_GB ISO-8859-1<br /> en_GB.UTF-8 UTF-8</em></div>
<p>Since UTF should be the same for each locale, we just point en_GB.UTF to UTF-8 (this is probably the same as the default locale your system has).</p>
<p>Once you&#8217;ve done that:</p>
<div style="background-color: #000; color: #7bf163; font-family: monospace; padding: 5px;"><em>sudo dpkg-reconfigure locales</em></div>
<p>Login/logout and enjoy working tab completion again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking JavaScript Seriously (feat. Backbone.js) (Slides)]]></title>
    <link href="http://th3james.github.com/blog/2011/11/21/taking-javascript-seriously-feat-backbonejs-s/"/>
    <updated>2011-11-21T00:00:00+00:00</updated>
    <id>http://th3james.github.com/blog/2011/11/21/taking-javascript-seriously-feat-backbonejs-s</id>
    <content type="html"><![CDATA[<p>I gave a talk last week about &#8216;Taking JavaScript Seriously&#8217;, talking about&nbsp;why you should be taking JavaScript seriously, how to improve your JavaScript by avoiding some common pitfalls, and using Backbone.js to make larger applications easier to build and maintain.</p>
<p><a href="http://speakerdeck.com/u/th3james/p/taking-javascript-seriously-feat-backbonejs">Check out the slides on SpeakerDeck</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding undefined, null and testing variable assignment in Javascript]]></title>
    <link href="http://th3james.github.com/blog/2011/09/13/understanding-undefined-in-javascript/"/>
    <updated>2011-09-13T00:00:00+01:00</updated>
    <id>http://th3james.github.com/blog/2011/09/13/understanding-undefined-in-javascript</id>
    <content type="html"><![CDATA[<p>During a code review a college suggested that we could change one of my javascript switches on an non-existant value:</p>
<p><script src="https://gist.github.com/1214594.js"></script></p>
<p>Which seemed to make sense because, since we don&#8217;t want to perform any type coercion on the null object, this should be faster.</p>
<p>However, when I reloaded the page, the comparison (previously returning true) was now returning false. Confused, I fired up the web inspector to discover this:</p>
<p><script src="https://gist.github.com/1214606.js"></script></p>
<p>Ok, so evidently <strong>null</strong> and <strong>undefined</strong> are different things, even though I&#8217;d been using them interchangeably (like many web developers, I made the mistake of diving in javascript without bothering to learn it&#8230;)</p>
<h2>Undefined and null</h2>
<p>So what exactly is the difference between the two? Undefined is the <strong>default value</strong> javascript variables take before they are assigned a value. Null, on the other hand, is the <strong>intentional absence</strong> of a value. When using ==, the types of both undefined and null coerce to false.</p>
<h2>The many meanings of undefined</h2>
<p>So, you can just do this:</p>
<p><script src="https://gist.github.com/1214616.js"></script></p>
<p>and in most cases, that will work. However, undefined is actually 3 things in javascript; a <strong>type</strong>, a <strong>value</strong> and a <strong>variable</strong>. The issue with the above code is that we&#8217;re not checking if the some_var is &#8216;undefined&#8217;, we&#8217;re checking if it&#8217;s equal to the global variable called undefined. Undefined (the variable) exists uninitialised in javascript in the global scope and like all uninitialised variables, it is set to undefined (the value). For more detail on this I highly recommend checking out <a href="http://javascriptweblog.wordpress.com/2010/08/16/understanding-undefined-and-preventing-referenceerrors/">Angus Croll&#8217;s post on the subject</a></p>
<p>The problem is, somewhere in your code or in a library, someone else could overwrite the undefined variable to be a string:</p>
<p><script src="https://gist.github.com/1214625.js"></script></p>
<p>Which would mean all your comparisons to undefined would compare to a string! There&#8217;s no good reason to do this, but given the potential for javascript variables leaking into the global scope, it&#8217;s worth not comparing to the undefined variable in case someone in a library or other javascript file has accidentally (or maliciously!) overridden it.</p>
<p>It&#8217;s worth noting that ECMA 5 forbids setting the value of undefined, but currently, only Safari enforces this.</p>
<h2>Comparing the types</h2>
<p>So if we can&#8217;t compare to the undefined variable, what should we do? Remember I said that undefined was also a type? Well, an uninitialised variable&#8217;s value is still of the <strong>type</strong> undefined. So we can use javascript&#8217;s typeof method to get the values type as a string:</p>
<p><script src="https://gist.github.com/1214638.js"></script></p>
<p>Hopefully this clears up not just how to test assignment correctly in JavaScript, but also why we do it this way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PJAX with Rails to AJAX navigation]]></title>
    <link href="http://th3james.github.com/blog/2011/05/30/using-pjax-with-rails-to-ajax-navigation/"/>
    <updated>2011-05-30T00:00:00+01:00</updated>
    <id>http://th3james.github.com/blog/2011/05/30/using-pjax-with-rails-to-ajax-navigation</id>
    <content type="html"><![CDATA[<p>PJAX is a javascript library which was mentioned by DHH in his Railsconf 11 keynote</p>
<p>In their own words:</p>
<p><em>pjax loads HTML from your server into the current page without a full reload. It&#8217;s ajax with real permalinks, page titles, and a working back button that fully degrades.<br /> pjax enhances the browsing experience - nothing more.</em></p>
<p><em> </em></p>
<p><em><a href="https://github.com/defunkt/jquery-pjax  " title="https://github.com/defunkt/jquery-pjax  "> <a href="https://github.com/defunkt/jquery-pjax">https://github.com/defunkt/jquery-pjax</a> </a></em></p>
<p>PJAX makes navigation much faster and feels more like using native app than a website. While only loading parts of the page through AJAX isn&#8217;t exactly a new thing, PJAX makes it easier to add it unobtrusively, with proper URLs and a working back button.</p>
<p>The project appears to be pretty new from the github page, and there isn&#8217;t a lot of documentation, so I though I&#8217;d document how I got it working with Rails 3.0</p>
<h2>Adding PJAX to your project</h2>
<p>First, you need to grab jquery.pjax.js and add it to your project (Oh, you&#8217;ll need JQuery too, but I&#8217;m guessing most of you have it anyway :-)</p>
<p>Next, add some javascript to your application.js file (or whatever your sitewide JS location is) to tell your chosen links to send using PJAX:</p>
<p><script src="https://gist.github.com/993070.js"></script></p>
<p>This code tells the browser to send all the links in ul.menu using pjax, and to load the results into the #main</p>
<p>This alone isn&#8217;t enough to make PJAX work. PJAX sends the request through AJAX, but if the response contains the &lt;html&gt; &nbsp;tag, PJAX considers it a full page response, and reloads the whole page.</p>
<p>So, to make PJAX load the returned content into #main object, you must only return the HTML fragment, without the layout around it. To do this, you simply do a render <em>:layout =&gt; false</em>. However, adding this to ever controller action soon get&#8217;s pretty tedious.</p>
<h2>Not returning a layout on PJAX requests</h2>
<p>Thankfully, PJAX helpfully adds &#8217;<em>X-PJAX = true</em>&#8217; to its request headers. So, to return all PJAX requests without the layout file, it&#8217;s simply a case of checking for the header parameter, and adding :layout =&gt; false if so.</p>
<p>I did this by hacking the Rails render method:</p>
<p><script src="https://gist.github.com/999482.js"></script></p>
<p>This was the best approach I could find to do this for all requests, if anyone knows of any better ways, let me know!</p>
<h2>That&#8217;s it!</h2>
<p>This should be all you need to do to get PJAX working in Rails 3.0, you should find that navigation on your selected elements happens using AJAX requests in supported browsers (basically anything not IE).</p>
<p>You can see it in action on my band&#8217;s website:</p>
<p><a href="http://barcodechannel.com" title="http://barcodechannel.com"> <a href="http://barcodechannel.com">http://barcodechannel.com</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Styling active links in Rails]]></title>
    <link href="http://th3james.github.com/blog/2011/05/17/styling-active-links-in-rails/"/>
    <updated>2011-05-17T00:00:00+01:00</updated>
    <id>http://th3james.github.com/blog/2011/05/17/styling-active-links-in-rails</id>
    <content type="html"><![CDATA[<p>We often want to style active links in our Rails to improve the users perception of their location in a given website. However, <em>a:active</em> is rarely sufficient when you&#8217;ve got sub menus on your site.</p>
<p>I went searching for people who&#8217;d already tackled this problem and found the post by &#8216;jammanbo&#8217; on this page:</p>
<p><a href="http://www.ruby-forum.com/topic/178087#779606" title="http://www.ruby-forum.com/topic/178087#779606">http://www.ruby-forum.com/topic/178087</a></p>
<p>jammanbo&#8217;s helper detects if the current path matches another path&#8217;s controller and action, returning &#8216;active&#8217; or &#8221; to use as the link class. While this is useful, there are many times when we want to match to a different level of specificity for links. For example, top level menus in sites I&#8217;m working on tend to match a controller, and sub menu entries to the action. Other times, we also want to match the route&#8217;s parameters.</p>
<p>Taking this into consideration, I came up with this helper:</p>
<p><script src="https://gist.github.com/976444.js"></script></p>
<p>This helper returns a string, either &#8216;active&#8217; or &#8221; depending on if the URI parameter matches. The optional second parameter defines the specificity, either</p>
<ul>
<li><strong>:action</strong> (default) match both controller and action</li>
<li><strong>:controller</strong> match just controller, or</li>
<li><strong>:complete</strong> matches all parameters in the route (except extra ?param=whatever)</li>
</ul>
<p>To use it, simply drop it into your ApplicationHelper, then start styling links with:</p>
<p><script src="https://gist.github.com/976484.js"></script></p>
<p>Have fun!</p>
]]></content>
  </entry>
  
</feed>
